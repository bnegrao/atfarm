package com.atfarm.fcstats.counter;

import java.math.BigDecimal;

/**
 * This Counter is fed by its add(double) method, and will count how many times
 * add() was invoked, the sum of all values given to add(), the min and max values.
 * 
 * To obtain the current state of the data stored in the counter use the method
 * getCounterData().
 * 
 * This implementation is thread-safe. The methods add() and getCounterData() can be invoked
 * concurrently from different threads, the CounterData instance retrieved is guaranteed to be 
 * consistent at the moment it was generated by getCounterData().
 * 
 * @author bnegrao
 *
 */
public class Counter {

	// the number of times the add() method was invoked
	private Long count;
	
	// using BigDecimal to hold the sum because arithmetics with doubles
	// yield unexpected results.
	private BigDecimal sum;
	
	private Double min;
	
	private Double max;
	
	public Counter() {
		this.sum = BigDecimal.ZERO;
		this.max = null;
		this.min = null;
		this.count = Long.valueOf(0l);
	}
	
	public void put(double value) {
		synchronized (this) {
			count++;
			
			sum = sum.add(new BigDecimal(Double.valueOf(value).toString()));
			
			if (min == null || value < min) {
				min = value;
			}
			
			if (max == null || value > max) {
				max = value;
			}
		}		
	}
	
	public void merge(Counter other) {		
		synchronized (this) {
			count += other.count;
			
			sum = sum.add(other.sum);
			
			if (min == null || other.min < min) {
				min = other.min;
			}
			
			if (max == null || other.max > max) {
				max = other.max;
			}				
		}	
	}

	public CounterData getCounterData() {
		synchronized (this) {
			return new CounterData(count, sum, min, max);
		}
	}
	
}
